def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.markdown_editor"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

// def cargoDir = "../../packages/rust-md-dart"

// // see https://stackoverflow.com/questions/69515032/how-to-integrate-flutter-apps-build-process-with-rust-code-i-e-when-building
// [
    // new Tuple2('Debug', 'debug'),
    // new Tuple2('Profile', 'profile'),
    // new Tuple2('Release', 'main')
// ].each {
    // def taskPostfix = it.first
    // def profileMode = it.second
    // def mode = profileMode != 'debug' ? '--release' : ''
    // def jniPath = "../../android/app/src/$profileMode/jniLibs"
    // tasks.whenTaskAdded { task ->
        // if (task.name == "javaPreCompile$taskPostfix") {
            // task.dependsOn "cargoBuild$taskPostfix"
        // }
    // }
    // tasks.register("cargoBuild$taskPostfix", Exec) {
        // commandLine 'sh', '-c', "cd $cargoDir && cargo ndk -t armeabi-v7a -t arm64-v8a -o $jniPath build $mode 2>&1"
    // }
// }
