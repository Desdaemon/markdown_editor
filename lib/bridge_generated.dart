// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments
import 'dart:convert';
import 'dart:typed_data';

import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

import 'package:markdown_editor/bridge_generated.types.dart';

abstract class RustMdDart extends FlutterRustBridgeBase<RustMdDartWire> implements IRustMdDart {
  factory RustMdDart(ffi.DynamicLibrary dylib) => RustMdDartImpl.raw(RustMdDartWire(dylib));

  RustMdDart.raw(RustMdDartWire inner) : super(inner);

  Future<List<Element>?> parse({required String markdown, dynamic hint});
}

// ------------------------- Implementation Details -------------------------

/// Implementations for RustMdDart. Prefer using RustMdDart if possible; but this class allows more
/// flexible customizations (such as subclassing to create an initializer, a logger, or
/// a timer).
class RustMdDartImpl extends RustMdDart {
  RustMdDartImpl.raw(RustMdDartWire inner) : super.raw(inner);

  Future<List<Element>?> parse({required String markdown, dynamic hint}) => executeNormal(FlutterRustBridgeTask(
      debugName: 'parse',
      callFfi: (port) => inner.wire_parse(port, _api2wire_String(markdown)),
      parseSuccessData: _wire2api_opt_list_element,
      hint: hint));

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

Attribute _wire2api_attribute(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return Attribute(
    key: _wire2api_String(arr[0]),
    value: _wire2api_String(arr[1]),
  );
}

Element _wire2api_element(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return Element(
    tag: _wire2api_String(arr[0]),
    attributes: _wire2api_opt_list_attribute(arr[1]),
    children: _wire2api_opt_list_element(arr[2]),
  );
}

List<Attribute> _wire2api_list_attribute(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_attribute).toList();
}

List<Element> _wire2api_list_element(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_element).toList();
}

List<Attribute>? _wire2api_opt_list_attribute(dynamic raw) {
  return raw == null ? null : _wire2api_list_attribute(raw);
}

List<Element>? _wire2api_opt_list_element(dynamic raw) {
  return raw == null ? null : _wire2api_list_element(raw);
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustMdDartWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustMdDartWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustMdDartWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void wire_parse(
    int port,
    ffi.Pointer<wire_uint_8_list> markdown,
  ) {
    return _wire_parse(
      port,
      markdown,
    );
  }

  late final _wire_parsePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_parse');
  late final _wire_parse = _wire_parsePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list(
    int len,
  ) {
    return _new_uint_8_list(
      len,
    );
  }

  late final _new_uint_8_listPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list');
  late final _new_uint_8_list = _new_uint_8_listPtr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>('free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct =
      _free_WireSyncReturnStructPtr.asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
