#![allow(
    non_camel_case_types,
    clippy::redundant_closure,
    clippy::useless_conversion
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

use crate::api::*;
use flutter_rust_bridge::*;

// Section: wire functions

#[no_mangle]
pub extern "C" fn wire_drop(port: i64, _input: *mut wire_OptionGallery) {
    let api__input = _input.wire2api();
    support::wrap_wire_func(&*FLUTTER_RUST_BRIDGE_EXECUTOR, "drop", port, move || {
        drop(api__input)
    });
}

// Section: wire structs

#[repr(C)]
#[derive(Clone)]
pub struct wire_OptionGallery {
    int32: *mut i32,
    int64: *mut i64,
    rational: *mut f64,
    boolean: *mut bool,
    string: *mut wire_uint_8_list,
    zerocopy: *mut wire_uint_8_list,
    int8linst: *mut wire_int_8_list,
    uint8linst: *mut wire_uint_8_list,
    rational_list: *mut wire_float_64_list,
    person: *mut wire_Person,
    people: *mut wire_list_person,
    people_nullable: *mut wire_list_Option_person,
    nullable_people: *mut wire_list_Option_person,
    int32_box: *mut i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_uint_8_list {
    ptr: *mut u8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_int_8_list {
    ptr: *mut i8,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_float_64_list {
    ptr: *mut f64,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_Person {
    name: *mut wire_uint_8_list,
    age: i32,
    bio: *mut wire_uint_8_list,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_person {
    ptr: *mut wire_Person,
    len: i32,
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_list_Option_person {
    ptr: *mut wire_Person,
    len: i32,
}

// Section: allocate functions

#[no_mangle]
pub extern "C" fn new_box_autoadd_option_gallery() -> *mut wire_OptionGallery {
    support::new_leak_box_ptr(wire_OptionGallery::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_i32(value: i32) -> *mut i32 {
    support::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_i64(value: i64) -> *mut i64 {
    support::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_f64(value: f64) -> *mut f64 {
    support::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_bool(value: bool) -> *mut bool {
    support::new_leak_box_ptr(value)
}

#[no_mangle]
pub extern "C" fn new_uint_8_list(len: i32) -> *mut wire_uint_8_list {
    let ans = wire_uint_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn new_int_8_list(len: i32) -> *mut wire_int_8_list {
    let ans = wire_int_8_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn new_float_64_list(len: i32) -> *mut wire_float_64_list {
    let ans = wire_float_64_list {
        ptr: support::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    support::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn new_box_autoadd_person() -> *mut wire_Person {
    support::new_leak_box_ptr(wire_Person::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn new_list_person(len: i32) -> *mut wire_list_person {
    let wrap = wire_list_person {
        ptr: support::new_leak_vec_ptr(wire_Person::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_list_Option_person(len: i32) -> *mut wire_list_Option_person {
    let wrap = wire_list_Option_person {
        ptr: support::new_leak_vec_ptr(wire_Person::new_with_null_ptr(), len),
        len,
    };
    support::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn new_box_i32(value: i32) -> *mut i32 {
    support::new_leak_box_ptr(value)
}

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl Wire2Api<Option<OptionGallery>> for *mut wire_OptionGallery {
    fn wire2api(self) -> Option<OptionGallery> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<OptionGallery> for *mut wire_OptionGallery {
    fn wire2api(self) -> OptionGallery {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<OptionGallery> for wire_OptionGallery {
    fn wire2api(self) -> OptionGallery {
        OptionGallery {
            int32: self.int32.wire2api(),
            int64: self.int64.wire2api(),
            rational: self.rational.wire2api(),
            boolean: self.boolean.wire2api(),
            string: self.string.wire2api(),
            zerocopy: self.zerocopy.wire2api(),
            int8linst: self.int8linst.wire2api(),
            uint8linst: self.uint8linst.wire2api(),
            rational_list: self.rational_list.wire2api(),
            person: self.person.wire2api(),
            people: self.people.wire2api(),
            people_nullable: self.people_nullable.wire2api(),
            nullable_people: self.nullable_people.wire2api(),
            int32_box: self.int32_box.wire2api(),
        }
    }
}

impl Wire2Api<Option<i32>> for *mut i32 {
    fn wire2api(self) -> Option<i32> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<i32> for *mut i32 {
    fn wire2api(self) -> i32 {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<Option<i64>> for *mut i64 {
    fn wire2api(self) -> Option<i64> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<i64> for *mut i64 {
    fn wire2api(self) -> i64 {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}

impl Wire2Api<Option<f64>> for *mut f64 {
    fn wire2api(self) -> Option<f64> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<f64> for *mut f64 {
    fn wire2api(self) -> f64 {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<Option<bool>> for *mut bool {
    fn wire2api(self) -> Option<bool> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<bool> for *mut bool {
    fn wire2api(self) -> bool {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<Option<String>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Option<String> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<String> for *mut wire_uint_8_list {
    fn wire2api(self) -> String {
        let vec: Vec<u8> = self.wire2api();
        String::from_utf8_lossy(&vec).into_owned()
    }
}

impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Vec<u8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<Option<ZeroCopyBuffer<Vec<u8>>>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Option<ZeroCopyBuffer<Vec<u8>>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<ZeroCopyBuffer<Vec<u8>>> for *mut wire_uint_8_list {
    fn wire2api(self) -> ZeroCopyBuffer<Vec<u8>> {
        ZeroCopyBuffer(self.wire2api())
    }
}

impl Wire2Api<Option<Vec<i8>>> for *mut wire_int_8_list {
    fn wire2api(self) -> Option<Vec<i8>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Vec<i8>> for *mut wire_int_8_list {
    fn wire2api(self) -> Vec<i8> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}

impl Wire2Api<Option<Vec<u8>>> for *mut wire_uint_8_list {
    fn wire2api(self) -> Option<Vec<u8>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Option<Vec<f64>>> for *mut wire_float_64_list {
    fn wire2api(self) -> Option<Vec<f64>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Vec<f64>> for *mut wire_float_64_list {
    fn wire2api(self) -> Vec<f64> {
        unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}

impl Wire2Api<Option<Person>> for *mut wire_Person {
    fn wire2api(self) -> Option<Person> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Person> for *mut wire_Person {
    fn wire2api(self) -> Person {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

impl Wire2Api<Person> for wire_Person {
    fn wire2api(self) -> Person {
        Person {
            name: self.name.wire2api(),
            age: self.age.wire2api(),
            bio: self.bio.wire2api(),
        }
    }
}

impl Wire2Api<Option<Vec<Person>>> for *mut wire_list_person {
    fn wire2api(self) -> Option<Vec<Person>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Vec<Person>> for *mut wire_list_person {
    fn wire2api(self) -> Vec<Person> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(|x| x.wire2api()).collect()
    }
}

impl Wire2Api<Vec<Option<Person>>> for *mut wire_list_Option_person {
    fn wire2api(self) -> Vec<Option<Person>> {
        let vec = unsafe {
            let wrap = support::box_from_leak_ptr(self);
            support::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(|x| x.wire2api()).collect()
    }
}

impl Wire2Api<Option<Vec<Option<Person>>>> for *mut wire_list_Option_person {
    fn wire2api(self) -> Option<Vec<Option<Person>>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Option<Box<i32>>> for *mut i32 {
    fn wire2api(self) -> Option<Box<i32>> {
        if self.is_null() {
            None
        } else {
            Some(self.wire2api())
        }
    }
}

impl Wire2Api<Box<i32>> for *mut i32 {
    fn wire2api(self) -> Box<i32> {
        let wrap = unsafe { support::box_from_leak_ptr(self) };
        (*wrap).wire2api().into()
    }
}

// Section: impl NewWithNullPtr

pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl NewWithNullPtr for wire_OptionGallery {
    fn new_with_null_ptr() -> Self {
        Self {
            int32: std::ptr::null_mut(),
            int64: std::ptr::null_mut(),
            rational: std::ptr::null_mut(),
            boolean: std::ptr::null_mut(),
            string: std::ptr::null_mut(),
            zerocopy: std::ptr::null_mut(),
            int8linst: std::ptr::null_mut(),
            uint8linst: std::ptr::null_mut(),
            rational_list: std::ptr::null_mut(),
            person: std::ptr::null_mut(),
            people: std::ptr::null_mut(),
            people_nullable: std::ptr::null_mut(),
            nullable_people: std::ptr::null_mut(),
            int32_box: std::ptr::null_mut(),
        }
    }
}

impl NewWithNullPtr for wire_Person {
    fn new_with_null_ptr() -> Self {
        Self {
            name: std::ptr::null_mut(),
            age: Default::default(),
            bio: std::ptr::null_mut(),
        }
    }
}

// Section: impl IntoDart

impl support::IntoDart for OptionGallery {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.int32.into_dart(),
            self.int64.into_dart(),
            self.rational.into_dart(),
            self.boolean.into_dart(),
            self.string.into_dart(),
            self.zerocopy.into_dart(),
            self.int8linst.into_dart(),
            self.uint8linst.into_dart(),
            self.rational_list.into_dart(),
            self.person.into_dart(),
            self.people.into_dart(),
            self.people_nullable.into_dart(),
            self.nullable_people.into_dart(),
            self.int32_box.into_dart(),
        ]
        .into_dart()
    }
}

impl support::IntoDart for Person {
    fn into_dart(self) -> support::DartCObject {
        vec![
            self.name.into_dart(),
            self.age.into_dart(),
            self.bio.into_dart(),
        ]
        .into_dart()
    }
}

// Section: executor
support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_EXECUTOR: support::DefaultExecutor = support::DefaultExecutor;
}
